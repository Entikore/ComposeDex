/*
 * Copyright 2024 Entikore
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.entikore.composedex.ui.theme

import android.app.Activity
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat
import de.entikore.composedex.domain.model.preferences.TypeThemeConfig

private val BugLightScheme = lightColorScheme(
    primary = bugPrimaryLight,
    onPrimary = bugOnPrimaryLight,
    primaryContainer = bugPrimaryContainerLight,
    onPrimaryContainer = bugOnPrimaryContainerLight,
    secondary = bugSecondaryLight,
    onSecondary = bugOnSecondaryLight,
    secondaryContainer = bugSecondaryContainerLight,
    onSecondaryContainer = bugOnSecondaryContainerLight,
    tertiary = bugTertiaryLight,
    onTertiary = bugOnTertiaryLight,
    tertiaryContainer = bugTertiaryContainerLight,
    onTertiaryContainer = bugOnTertiaryContainerLight,
    error = bugErrorLight,
    onError = bugOnErrorLight,
    errorContainer = bugErrorContainerLight,
    onErrorContainer = bugOnErrorContainerLight,
    background = bugBackgroundLight,
    onBackground = bugOnBackgroundLight,
    surface = bugSurfaceLight,
    onSurface = bugOnSurfaceLight,
    surfaceVariant = bugSurfaceVariantLight,
    onSurfaceVariant = bugOnSurfaceVariantLight,
    outline = bugOutlineLight,
    outlineVariant = bugOutlineVariantLight,
    scrim = bugScrimLight,
    inverseSurface = bugInverseSurfaceLight,
    inverseOnSurface = bugInverseOnSurfaceLight,
    inversePrimary = bugInversePrimaryLight,
    surfaceDim = bugSurfaceDimLight,
    surfaceBright = bugSurfaceBrightLight,
    surfaceContainerLowest = bugSurfaceContainerLowestLight,
    surfaceContainerLow = bugSurfaceContainerLowLight,
    surfaceContainer = bugSurfaceContainerLight,
    surfaceContainerHigh = bugSurfaceContainerHighLight,
    surfaceContainerHighest = bugSurfaceContainerHighestLight,
)

private val BugDarkScheme = darkColorScheme(
    primary = bugPrimaryDark,
    onPrimary = bugOnPrimaryDark,
    primaryContainer = bugPrimaryContainerDark,
    onPrimaryContainer = bugOnPrimaryContainerDark,
    secondary = bugSecondaryDark,
    onSecondary = bugOnSecondaryDark,
    secondaryContainer = bugSecondaryContainerDark,
    onSecondaryContainer = bugOnSecondaryContainerDark,
    tertiary = bugTertiaryDark,
    onTertiary = bugOnTertiaryDark,
    tertiaryContainer = bugTertiaryContainerDark,
    onTertiaryContainer = bugOnTertiaryContainerDark,
    error = bugErrorDark,
    onError = bugOnErrorDark,
    errorContainer = bugErrorContainerDark,
    onErrorContainer = bugOnErrorContainerDark,
    background = bugBackgroundDark,
    onBackground = bugOnBackgroundDark,
    surface = bugSurfaceDark,
    onSurface = bugOnSurfaceDark,
    surfaceVariant = bugSurfaceVariantDark,
    onSurfaceVariant = bugOnSurfaceVariantDark,
    outline = bugOutlineDark,
    outlineVariant = bugOutlineVariantDark,
    scrim = bugScrimDark,
    inverseSurface = bugInverseSurfaceDark,
    inverseOnSurface = bugInverseOnSurfaceDark,
    inversePrimary = bugInversePrimaryDark,
    surfaceDim = bugSurfaceDimDark,
    surfaceBright = bugSurfaceBrightDark,
    surfaceContainerLowest = bugSurfaceContainerLowestDark,
    surfaceContainerLow = bugSurfaceContainerLowDark,
    surfaceContainer = bugSurfaceContainerDark,
    surfaceContainerHigh = bugSurfaceContainerHighDark,
    surfaceContainerHighest = bugSurfaceContainerHighestDark,
)

private val DarkLightScheme = lightColorScheme(
    primary = darkPrimaryLight,
    onPrimary = darkOnPrimaryLight,
    primaryContainer = darkPrimaryContainerLight,
    onPrimaryContainer = darkOnPrimaryContainerLight,
    secondary = darkSecondaryLight,
    onSecondary = darkOnSecondaryLight,
    secondaryContainer = darkSecondaryContainerLight,
    onSecondaryContainer = darkOnSecondaryContainerLight,
    tertiary = darkTertiaryLight,
    onTertiary = darkOnTertiaryLight,
    tertiaryContainer = darkTertiaryContainerLight,
    onTertiaryContainer = darkOnTertiaryContainerLight,
    error = darkErrorLight,
    onError = darkOnErrorLight,
    errorContainer = darkErrorContainerLight,
    onErrorContainer = darkOnErrorContainerLight,
    background = darkBackgroundLight,
    onBackground = darkOnBackgroundLight,
    surface = darkSurfaceLight,
    onSurface = darkOnSurfaceLight,
    surfaceVariant = darkSurfaceVariantLight,
    onSurfaceVariant = darkOnSurfaceVariantLight,
    outline = darkOutlineLight,
    outlineVariant = darkOutlineVariantLight,
    scrim = darkScrimLight,
    inverseSurface = darkInverseSurfaceLight,
    inverseOnSurface = darkInverseOnSurfaceLight,
    inversePrimary = darkInversePrimaryLight,
    surfaceDim = darkSurfaceDimLight,
    surfaceBright = darkSurfaceBrightLight,
    surfaceContainerLowest = darkSurfaceContainerLowestLight,
    surfaceContainerLow = darkSurfaceContainerLowLight,
    surfaceContainer = darkSurfaceContainerLight,
    surfaceContainerHigh = darkSurfaceContainerHighLight,
    surfaceContainerHighest = darkSurfaceContainerHighestLight,
)

private val DarkDarkScheme = darkColorScheme(
    primary = darkPrimaryDark,
    onPrimary = darkOnPrimaryDark,
    primaryContainer = darkPrimaryContainerDark,
    onPrimaryContainer = darkOnPrimaryContainerDark,
    secondary = darkSecondaryDark,
    onSecondary = darkOnSecondaryDark,
    secondaryContainer = darkSecondaryContainerDark,
    onSecondaryContainer = darkOnSecondaryContainerDark,
    tertiary = darkTertiaryDark,
    onTertiary = darkOnTertiaryDark,
    tertiaryContainer = darkTertiaryContainerDark,
    onTertiaryContainer = darkOnTertiaryContainerDark,
    error = darkErrorDark,
    onError = darkOnErrorDark,
    errorContainer = darkErrorContainerDark,
    onErrorContainer = darkOnErrorContainerDark,
    background = darkBackgroundDark,
    onBackground = darkOnBackgroundDark,
    surface = darkSurfaceDark,
    onSurface = darkOnSurfaceDark,
    surfaceVariant = darkSurfaceVariantDark,
    onSurfaceVariant = darkOnSurfaceVariantDark,
    outline = darkOutlineDark,
    outlineVariant = darkOutlineVariantDark,
    scrim = darkScrimDark,
    inverseSurface = darkInverseSurfaceDark,
    inverseOnSurface = darkInverseOnSurfaceDark,
    inversePrimary = darkInversePrimaryDark,
    surfaceDim = darkSurfaceDimDark,
    surfaceBright = darkSurfaceBrightDark,
    surfaceContainerLowest = darkSurfaceContainerLowestDark,
    surfaceContainerLow = darkSurfaceContainerLowDark,
    surfaceContainer = darkSurfaceContainerDark,
    surfaceContainerHigh = darkSurfaceContainerHighDark,
    surfaceContainerHighest = darkSurfaceContainerHighestDark,
)

private val DragonLightScheme = lightColorScheme(
    primary = dragonPrimaryLight,
    onPrimary = dragonOnPrimaryLight,
    primaryContainer = dragonPrimaryContainerLight,
    onPrimaryContainer = dragonOnPrimaryContainerLight,
    secondary = dragonSecondaryLight,
    onSecondary = dragonOnSecondaryLight,
    secondaryContainer = dragonSecondaryContainerLight,
    onSecondaryContainer = dragonOnSecondaryContainerLight,
    tertiary = dragonTertiaryLight,
    onTertiary = dragonOnTertiaryLight,
    tertiaryContainer = dragonTertiaryContainerLight,
    onTertiaryContainer = dragonOnTertiaryContainerLight,
    error = dragonErrorLight,
    onError = dragonOnErrorLight,
    errorContainer = dragonErrorContainerLight,
    onErrorContainer = dragonOnErrorContainerLight,
    background = dragonBackgroundLight,
    onBackground = dragonOnBackgroundLight,
    surface = dragonSurfaceLight,
    onSurface = dragonOnSurfaceLight,
    surfaceVariant = dragonSurfaceVariantLight,
    onSurfaceVariant = dragonOnSurfaceVariantLight,
    outline = dragonOutlineLight,
    outlineVariant = dragonOutlineVariantLight,
    scrim = dragonScrimLight,
    inverseSurface = dragonInverseSurfaceLight,
    inverseOnSurface = dragonInverseOnSurfaceLight,
    inversePrimary = dragonInversePrimaryLight,
    surfaceDim = dragonSurfaceDimLight,
    surfaceBright = dragonSurfaceBrightLight,
    surfaceContainerLowest = dragonSurfaceContainerLowestLight,
    surfaceContainerLow = dragonSurfaceContainerLowLight,
    surfaceContainer = dragonSurfaceContainerLight,
    surfaceContainerHigh = dragonSurfaceContainerHighLight,
    surfaceContainerHighest = dragonSurfaceContainerHighestLight,
)

private val DragonDarkScheme = darkColorScheme(
    primary = dragonPrimaryDark,
    onPrimary = dragonOnPrimaryDark,
    primaryContainer = dragonPrimaryContainerDark,
    onPrimaryContainer = dragonOnPrimaryContainerDark,
    secondary = dragonSecondaryDark,
    onSecondary = dragonOnSecondaryDark,
    secondaryContainer = dragonSecondaryContainerDark,
    onSecondaryContainer = dragonOnSecondaryContainerDark,
    tertiary = dragonTertiaryDark,
    onTertiary = dragonOnTertiaryDark,
    tertiaryContainer = dragonTertiaryContainerDark,
    onTertiaryContainer = dragonOnTertiaryContainerDark,
    error = dragonErrorDark,
    onError = dragonOnErrorDark,
    errorContainer = dragonErrorContainerDark,
    onErrorContainer = dragonOnErrorContainerDark,
    background = dragonBackgroundDark,
    onBackground = dragonOnBackgroundDark,
    surface = dragonSurfaceDark,
    onSurface = dragonOnSurfaceDark,
    surfaceVariant = dragonSurfaceVariantDark,
    onSurfaceVariant = dragonOnSurfaceVariantDark,
    outline = dragonOutlineDark,
    outlineVariant = dragonOutlineVariantDark,
    scrim = dragonScrimDark,
    inverseSurface = dragonInverseSurfaceDark,
    inverseOnSurface = dragonInverseOnSurfaceDark,
    inversePrimary = dragonInversePrimaryDark,
    surfaceDim = dragonSurfaceDimDark,
    surfaceBright = dragonSurfaceBrightDark,
    surfaceContainerLowest = dragonSurfaceContainerLowestDark,
    surfaceContainerLow = dragonSurfaceContainerLowDark,
    surfaceContainer = dragonSurfaceContainerDark,
    surfaceContainerHigh = dragonSurfaceContainerHighDark,
    surfaceContainerHighest = dragonSurfaceContainerHighestDark,
)

private val ElectricLightScheme = lightColorScheme(
    primary = electricPrimaryLight,
    onPrimary = electricOnPrimaryLight,
    primaryContainer = electricPrimaryContainerLight,
    onPrimaryContainer = electricOnPrimaryContainerLight,
    secondary = electricSecondaryLight,
    onSecondary = electricOnSecondaryLight,
    secondaryContainer = electricSecondaryContainerLight,
    onSecondaryContainer = electricOnSecondaryContainerLight,
    tertiary = electricTertiaryLight,
    onTertiary = electricOnTertiaryLight,
    tertiaryContainer = electricTertiaryContainerLight,
    onTertiaryContainer = electricOnTertiaryContainerLight,
    error = electricErrorLight,
    onError = electricOnErrorLight,
    errorContainer = electricErrorContainerLight,
    onErrorContainer = electricOnErrorContainerLight,
    background = electricBackgroundLight,
    onBackground = electricOnBackgroundLight,
    surface = electricSurfaceLight,
    onSurface = electricOnSurfaceLight,
    surfaceVariant = electricSurfaceVariantLight,
    onSurfaceVariant = electricOnSurfaceVariantLight,
    outline = electricOutlineLight,
    outlineVariant = electricOutlineVariantLight,
    scrim = electricScrimLight,
    inverseSurface = electricInverseSurfaceLight,
    inverseOnSurface = electricInverseOnSurfaceLight,
    inversePrimary = electricInversePrimaryLight,
    surfaceDim = electricSurfaceDimLight,
    surfaceBright = electricSurfaceBrightLight,
    surfaceContainerLowest = electricSurfaceContainerLowestLight,
    surfaceContainerLow = electricSurfaceContainerLowLight,
    surfaceContainer = electricSurfaceContainerLight,
    surfaceContainerHigh = electricSurfaceContainerHighLight,
    surfaceContainerHighest = electricSurfaceContainerHighestLight,
)

private val ElectricDarkScheme = darkColorScheme(
    primary = electricPrimaryDark,
    onPrimary = electricOnPrimaryDark,
    primaryContainer = electricPrimaryContainerDark,
    onPrimaryContainer = electricOnPrimaryContainerDark,
    secondary = electricSecondaryDark,
    onSecondary = electricOnSecondaryDark,
    secondaryContainer = electricSecondaryContainerDark,
    onSecondaryContainer = electricOnSecondaryContainerDark,
    tertiary = electricTertiaryDark,
    onTertiary = electricOnTertiaryDark,
    tertiaryContainer = electricTertiaryContainerDark,
    onTertiaryContainer = electricOnTertiaryContainerDark,
    error = electricErrorDark,
    onError = electricOnErrorDark,
    errorContainer = electricErrorContainerDark,
    onErrorContainer = electricOnErrorContainerDark,
    background = electricBackgroundDark,
    onBackground = electricOnBackgroundDark,
    surface = electricSurfaceDark,
    onSurface = electricOnSurfaceDark,
    surfaceVariant = electricSurfaceVariantDark,
    onSurfaceVariant = electricOnSurfaceVariantDark,
    outline = electricOutlineDark,
    outlineVariant = electricOutlineVariantDark,
    scrim = electricScrimDark,
    inverseSurface = electricInverseSurfaceDark,
    inverseOnSurface = electricInverseOnSurfaceDark,
    inversePrimary = electricInversePrimaryDark,
    surfaceDim = electricSurfaceDimDark,
    surfaceBright = electricSurfaceBrightDark,
    surfaceContainerLowest = electricSurfaceContainerLowestDark,
    surfaceContainerLow = electricSurfaceContainerLowDark,
    surfaceContainer = electricSurfaceContainerDark,
    surfaceContainerHigh = electricSurfaceContainerHighDark,
    surfaceContainerHighest = electricSurfaceContainerHighestDark,
)

private val FairyLightScheme = lightColorScheme(
    primary = fairyPrimaryLight,
    onPrimary = fairyOnPrimaryLight,
    primaryContainer = fairyPrimaryContainerLight,
    onPrimaryContainer = fairyOnPrimaryContainerLight,
    secondary = fairySecondaryLight,
    onSecondary = fairyOnSecondaryLight,
    secondaryContainer = fairySecondaryContainerLight,
    onSecondaryContainer = fairyOnSecondaryContainerLight,
    tertiary = fairyTertiaryLight,
    onTertiary = fairyOnTertiaryLight,
    tertiaryContainer = fairyTertiaryContainerLight,
    onTertiaryContainer = fairyOnTertiaryContainerLight,
    error = fairyErrorLight,
    onError = fairyOnErrorLight,
    errorContainer = fairyErrorContainerLight,
    onErrorContainer = fairyOnErrorContainerLight,
    background = fairyBackgroundLight,
    onBackground = fairyOnBackgroundLight,
    surface = fairySurfaceLight,
    onSurface = fairyOnSurfaceLight,
    surfaceVariant = fairySurfaceVariantLight,
    onSurfaceVariant = fairyOnSurfaceVariantLight,
    outline = fairyOutlineLight,
    outlineVariant = fairyOutlineVariantLight,
    scrim = fairyScrimLight,
    inverseSurface = fairyInverseSurfaceLight,
    inverseOnSurface = fairyInverseOnSurfaceLight,
    inversePrimary = fairyInversePrimaryLight,
    surfaceDim = fairySurfaceDimLight,
    surfaceBright = fairySurfaceBrightLight,
    surfaceContainerLowest = fairySurfaceContainerLowestLight,
    surfaceContainerLow = fairySurfaceContainerLowLight,
    surfaceContainer = fairySurfaceContainerLight,
    surfaceContainerHigh = fairySurfaceContainerHighLight,
    surfaceContainerHighest = fairySurfaceContainerHighestLight,
)

private val FairyDarkScheme = darkColorScheme(
    primary = fairyPrimaryDark,
    onPrimary = fairyOnPrimaryDark,
    primaryContainer = fairyPrimaryContainerDark,
    onPrimaryContainer = fairyOnPrimaryContainerDark,
    secondary = fairySecondaryDark,
    onSecondary = fairyOnSecondaryDark,
    secondaryContainer = fairySecondaryContainerDark,
    onSecondaryContainer = fairyOnSecondaryContainerDark,
    tertiary = fairyTertiaryDark,
    onTertiary = fairyOnTertiaryDark,
    tertiaryContainer = fairyTertiaryContainerDark,
    onTertiaryContainer = fairyOnTertiaryContainerDark,
    error = fairyErrorDark,
    onError = fairyOnErrorDark,
    errorContainer = fairyErrorContainerDark,
    onErrorContainer = fairyOnErrorContainerDark,
    background = fairyBackgroundDark,
    onBackground = fairyOnBackgroundDark,
    surface = fairySurfaceDark,
    onSurface = fairyOnSurfaceDark,
    surfaceVariant = fairySurfaceVariantDark,
    onSurfaceVariant = fairyOnSurfaceVariantDark,
    outline = fairyOutlineDark,
    outlineVariant = fairyOutlineVariantDark,
    scrim = fairyScrimDark,
    inverseSurface = fairyInverseSurfaceDark,
    inverseOnSurface = fairyInverseOnSurfaceDark,
    inversePrimary = fairyInversePrimaryDark,
    surfaceDim = fairySurfaceDimDark,
    surfaceBright = fairySurfaceBrightDark,
    surfaceContainerLowest = fairySurfaceContainerLowestDark,
    surfaceContainerLow = fairySurfaceContainerLowDark,
    surfaceContainer = fairySurfaceContainerDark,
    surfaceContainerHigh = fairySurfaceContainerHighDark,
    surfaceContainerHighest = fairySurfaceContainerHighestDark,
)

private val FightingLightScheme = lightColorScheme(
    primary = fightingPrimaryLight,
    onPrimary = fightingOnPrimaryLight,
    primaryContainer = fightingPrimaryContainerLight,
    onPrimaryContainer = fightingOnPrimaryContainerLight,
    secondary = fightingSecondaryLight,
    onSecondary = fightingOnSecondaryLight,
    secondaryContainer = fightingSecondaryContainerLight,
    onSecondaryContainer = fightingOnSecondaryContainerLight,
    tertiary = fightingTertiaryLight,
    onTertiary = fightingOnTertiaryLight,
    tertiaryContainer = fightingTertiaryContainerLight,
    onTertiaryContainer = fightingOnTertiaryContainerLight,
    error = fightingErrorLight,
    onError = fightingOnErrorLight,
    errorContainer = fightingErrorContainerLight,
    onErrorContainer = fightingOnErrorContainerLight,
    background = fightingBackgroundLight,
    onBackground = fightingOnBackgroundLight,
    surface = fightingSurfaceLight,
    onSurface = fightingOnSurfaceLight,
    surfaceVariant = fightingSurfaceVariantLight,
    onSurfaceVariant = fightingOnSurfaceVariantLight,
    outline = fightingOutlineLight,
    outlineVariant = fightingOutlineVariantLight,
    scrim = fightingScrimLight,
    inverseSurface = fightingInverseSurfaceLight,
    inverseOnSurface = fightingInverseOnSurfaceLight,
    inversePrimary = fightingInversePrimaryLight,
    surfaceDim = fightingSurfaceDimLight,
    surfaceBright = fightingSurfaceBrightLight,
    surfaceContainerLowest = fightingSurfaceContainerLowestLight,
    surfaceContainerLow = fightingSurfaceContainerLowLight,
    surfaceContainer = fightingSurfaceContainerLight,
    surfaceContainerHigh = fightingSurfaceContainerHighLight,
    surfaceContainerHighest = fightingSurfaceContainerHighestLight
)

private val FightingDarkScheme = darkColorScheme(
    primary = fightingPrimaryDark,
    onPrimary = fightingOnPrimaryDark,
    primaryContainer = fightingPrimaryContainerDark,
    onPrimaryContainer = fightingOnPrimaryContainerDark,
    secondary = fightingSecondaryDark,
    onSecondary = fightingOnSecondaryDark,
    secondaryContainer = fightingSecondaryContainerDark,
    onSecondaryContainer = fightingOnSecondaryContainerDark,
    tertiary = fightingTertiaryDark,
    onTertiary = fightingOnTertiaryDark,
    tertiaryContainer = fightingTertiaryContainerDark,
    onTertiaryContainer = fightingOnTertiaryContainerDark,
    error = fightingErrorDark,
    onError = fightingOnErrorDark,
    errorContainer = fightingErrorContainerDark,
    onErrorContainer = fightingOnErrorContainerDark,
    background = fightingBackgroundDark,
    onBackground = fightingOnBackgroundDark,
    surface = fightingSurfaceDark,
    onSurface = fightingOnSurfaceDark,
    surfaceVariant = fightingSurfaceVariantDark,
    onSurfaceVariant = fightingOnSurfaceVariantDark,
    outline = fightingOutlineDark,
    outlineVariant = fightingOutlineVariantDark,
    scrim = fightingScrimDark,
    inverseSurface = fightingInverseSurfaceDark,
    inverseOnSurface = fightingInverseOnSurfaceDark,
    inversePrimary = fightingInversePrimaryDark,
    surfaceDim = fightingSurfaceDimDark,
    surfaceBright = fightingSurfaceBrightDark,
    surfaceContainerLowest = fightingSurfaceContainerLowestDark,
    surfaceContainerLow = fightingSurfaceContainerLowDark,
    surfaceContainer = fightingSurfaceContainerDark,
    surfaceContainerHigh = fightingSurfaceContainerHighDark,
    surfaceContainerHighest = fightingSurfaceContainerHighestDark
)

private val FireLightScheme = lightColorScheme(
    primary = firePrimaryLight,
    onPrimary = fireOnPrimaryLight,
    primaryContainer = firePrimaryContainerLight,
    onPrimaryContainer = fireOnPrimaryContainerLight,
    secondary = fireSecondaryLight,
    onSecondary = fireOnSecondaryLight,
    secondaryContainer = fireSecondaryContainerLight,
    onSecondaryContainer = fireOnSecondaryContainerLight,
    tertiary = fireTertiaryLight,
    onTertiary = fireOnTertiaryLight,
    tertiaryContainer = fireTertiaryContainerLight,
    onTertiaryContainer = fireOnTertiaryContainerLight,
    error = fireErrorLight,
    onError = fireOnErrorLight,
    errorContainer = fireErrorContainerLight,
    onErrorContainer = fireOnErrorContainerLight,
    background = fireBackgroundLight,
    onBackground = fireOnBackgroundLight,
    surface = fireSurfaceLight,
    onSurface = fireOnSurfaceLight,
    surfaceVariant = fireSurfaceVariantLight,
    onSurfaceVariant = fireOnSurfaceVariantLight,
    outline = fireOutlineLight,
    outlineVariant = fireOutlineVariantLight,
    scrim = fireScrimLight,
    inverseSurface = fireInverseSurfaceLight,
    inverseOnSurface = fireInverseOnSurfaceLight,
    inversePrimary = fireInversePrimaryLight,
    surfaceDim = fireSurfaceDimLight,
    surfaceBright = fireSurfaceBrightLight,
    surfaceContainerLowest = fireSurfaceContainerLowestLight,
    surfaceContainerLow = fireSurfaceContainerLowLight,
    surfaceContainer = fireSurfaceContainerLight,
    surfaceContainerHigh = fireSurfaceContainerHighLight,
    surfaceContainerHighest = fireSurfaceContainerHighestLight
)

private val FireDarkScheme = darkColorScheme(
    primary = firePrimaryDark,
    onPrimary = fireOnPrimaryDark,
    primaryContainer = firePrimaryContainerDark,
    onPrimaryContainer = fireOnPrimaryContainerDark,
    secondary = fireSecondaryDark,
    onSecondary = fireOnSecondaryDark,
    secondaryContainer = fireSecondaryContainerDark,
    onSecondaryContainer = fireOnSecondaryContainerDark,
    tertiary = fireTertiaryDark,
    onTertiary = fireOnTertiaryDark,
    tertiaryContainer = fireTertiaryContainerDark,
    onTertiaryContainer = fireOnTertiaryContainerDark,
    error = fireErrorDark,
    onError = fireOnErrorDark,
    errorContainer = fireErrorContainerDark,
    onErrorContainer = fireOnErrorContainerDark,
    background = fireBackgroundDark,
    onBackground = fireOnBackgroundDark,
    surface = fireSurfaceDark,
    onSurface = fireOnSurfaceDark,
    surfaceVariant = fireSurfaceVariantDark,
    onSurfaceVariant = fireOnSurfaceVariantDark,
    outline = fireOutlineDark,
    outlineVariant = fireOutlineVariantDark,
    scrim = fireScrimDark,
    inverseSurface = fireInverseSurfaceDark,
    inverseOnSurface = fireInverseOnSurfaceDark,
    inversePrimary = fireInversePrimaryDark,
    surfaceDim = fireSurfaceDimDark,
    surfaceBright = fireSurfaceBrightDark,
    surfaceContainerLowest = fireSurfaceContainerLowestDark,
    surfaceContainerLow = fireSurfaceContainerLowDark,
    surfaceContainer = fireSurfaceContainerDark,
    surfaceContainerHigh = fireSurfaceContainerHighDark,
    surfaceContainerHighest = fireSurfaceContainerHighestDark
)

private val FlyingLightScheme = lightColorScheme(
    primary = flyingPrimaryLight,
    onPrimary = flyingOnPrimaryLight,
    primaryContainer = flyingPrimaryContainerLight,
    onPrimaryContainer = flyingOnPrimaryContainerLight,
    secondary = flyingSecondaryLight,
    onSecondary = flyingOnSecondaryLight,
    secondaryContainer = flyingSecondaryContainerLight,
    onSecondaryContainer = flyingOnSecondaryContainerLight,
    tertiary = flyingTertiaryLight,
    onTertiary = flyingOnTertiaryLight,
    tertiaryContainer = flyingTertiaryContainerLight,
    onTertiaryContainer = flyingOnTertiaryContainerLight,
    error = flyingErrorLight,
    onError = flyingOnErrorLight,
    errorContainer = flyingErrorContainerLight,
    onErrorContainer = flyingOnErrorContainerLight,
    background = flyingBackgroundLight,
    onBackground = flyingOnBackgroundLight,
    surface = flyingSurfaceLight,
    onSurface = flyingOnSurfaceLight,
    surfaceVariant = flyingSurfaceVariantLight,
    onSurfaceVariant = flyingOnSurfaceVariantLight,
    outline = flyingOutlineLight,
    outlineVariant = flyingOutlineVariantLight,
    scrim = flyingScrimLight,
    inverseSurface = flyingInverseSurfaceLight,
    inverseOnSurface = flyingInverseOnSurfaceLight,
    inversePrimary = flyingInversePrimaryLight,
    surfaceDim = flyingSurfaceDimLight,
    surfaceBright = flyingSurfaceBrightLight,
    surfaceContainerLowest = flyingSurfaceContainerLowestLight,
    surfaceContainerLow = flyingSurfaceContainerLowLight,
    surfaceContainer = flyingSurfaceContainerLight,
    surfaceContainerHigh = flyingSurfaceContainerHighLight,
    surfaceContainerHighest = flyingSurfaceContainerHighestLight
)

private val FlyingDarkScheme = darkColorScheme(
    primary = flyingPrimaryDark,
    onPrimary = flyingOnPrimaryDark,
    primaryContainer = flyingPrimaryContainerDark,
    onPrimaryContainer = flyingOnPrimaryContainerDark,
    secondary = flyingSecondaryDark,
    onSecondary = flyingOnSecondaryDark,
    secondaryContainer = flyingSecondaryContainerDark,
    onSecondaryContainer = flyingOnSecondaryContainerDark,
    tertiary = flyingTertiaryDark,
    onTertiary = flyingOnTertiaryDark,
    tertiaryContainer = flyingTertiaryContainerDark,
    onTertiaryContainer = flyingOnTertiaryContainerDark,
    error = flyingErrorDark,
    onError = flyingOnErrorDark,
    errorContainer = flyingErrorContainerDark,
    onErrorContainer = flyingOnErrorContainerDark,
    background = flyingBackgroundDark,
    onBackground = flyingOnBackgroundDark,
    surface = flyingSurfaceDark,
    onSurface = flyingOnSurfaceDark,
    surfaceVariant = flyingSurfaceVariantDark,
    onSurfaceVariant = flyingOnSurfaceVariantDark,
    outline = flyingOutlineDark,
    outlineVariant = flyingOutlineVariantDark,
    scrim = flyingScrimDark,
    inverseSurface = flyingInverseSurfaceDark,
    inverseOnSurface = flyingInverseOnSurfaceDark,
    inversePrimary = flyingInversePrimaryDark,
    surfaceDim = flyingSurfaceDimDark,
    surfaceBright = flyingSurfaceBrightDark,
    surfaceContainerLowest = flyingSurfaceContainerLowestDark,
    surfaceContainerLow = flyingSurfaceContainerLowDark,
    surfaceContainer = flyingSurfaceContainerDark,
    surfaceContainerHigh = flyingSurfaceContainerHighDark,
    surfaceContainerHighest = flyingSurfaceContainerHighestDark
)

private val GhostLightScheme = lightColorScheme(
    primary = ghostPrimaryLight,
    onPrimary = ghostOnPrimaryLight,
    primaryContainer = ghostPrimaryContainerLight,
    onPrimaryContainer = ghostOnPrimaryContainerLight,
    secondary = ghostSecondaryLight,
    onSecondary = ghostOnSecondaryLight,
    secondaryContainer = ghostSecondaryContainerLight,
    onSecondaryContainer = ghostOnSecondaryContainerLight,
    tertiary = ghostTertiaryLight,
    onTertiary = ghostOnTertiaryLight,
    tertiaryContainer = ghostTertiaryContainerLight,
    onTertiaryContainer = ghostOnTertiaryContainerLight,
    error = ghostErrorLight,
    onError = ghostOnErrorLight,
    errorContainer = ghostErrorContainerLight,
    onErrorContainer = ghostOnErrorContainerLight,
    background = ghostBackgroundLight,
    onBackground = ghostOnBackgroundLight,
    surface = ghostSurfaceLight,
    onSurface = ghostOnSurfaceLight,
    surfaceVariant = ghostSurfaceVariantLight,
    onSurfaceVariant = ghostOnSurfaceVariantLight,
    outline = ghostOutlineLight,
    outlineVariant = ghostOutlineVariantLight,
    scrim = ghostScrimLight,
    inverseSurface = ghostInverseSurfaceLight,
    inverseOnSurface = ghostInverseOnSurfaceLight,
    inversePrimary = ghostInversePrimaryLight,
    surfaceDim = ghostSurfaceDimLight,
    surfaceBright = ghostSurfaceBrightLight,
    surfaceContainerLowest = ghostSurfaceContainerLowestLight,
    surfaceContainerLow = ghostSurfaceContainerLowLight,
    surfaceContainer = ghostSurfaceContainerLight,
    surfaceContainerHigh = ghostSurfaceContainerHighLight,
    surfaceContainerHighest = ghostSurfaceContainerHighestLight
)

private val GhostDarkScheme = darkColorScheme(
    primary = ghostPrimaryDark,
    onPrimary = ghostOnPrimaryDark,
    primaryContainer = ghostPrimaryContainerDark,
    onPrimaryContainer = ghostOnPrimaryContainerDark,
    secondary = ghostSecondaryDark,
    onSecondary = ghostOnSecondaryDark,
    secondaryContainer = ghostSecondaryContainerDark,
    onSecondaryContainer = ghostOnSecondaryContainerDark,
    tertiary = ghostTertiaryDark,
    onTertiary = ghostOnTertiaryDark,
    tertiaryContainer = ghostTertiaryContainerDark,
    onTertiaryContainer = ghostOnTertiaryContainerDark,
    error = ghostErrorDark,
    onError = ghostOnErrorDark,
    errorContainer = ghostErrorContainerDark,
    onErrorContainer = ghostOnErrorContainerDark,
    background = ghostBackgroundDark,
    onBackground = ghostOnBackgroundDark,
    surface = ghostSurfaceDark,
    onSurface = ghostOnSurfaceDark,
    surfaceVariant = ghostSurfaceVariantDark,
    onSurfaceVariant = ghostOnSurfaceVariantDark,
    outline = ghostOutlineDark,
    outlineVariant = ghostOutlineVariantDark,
    scrim = ghostScrimDark,
    inverseSurface = ghostInverseSurfaceDark,
    inverseOnSurface = ghostInverseOnSurfaceDark,
    inversePrimary = ghostInversePrimaryDark,
    surfaceDim = ghostSurfaceDimDark,
    surfaceBright = ghostSurfaceBrightDark,
    surfaceContainerLowest = ghostSurfaceContainerLowestDark,
    surfaceContainerLow = ghostSurfaceContainerLowDark,
    surfaceContainer = ghostSurfaceContainerDark,
    surfaceContainerHigh = ghostSurfaceContainerHighDark,
    surfaceContainerHighest = ghostSurfaceContainerHighestDark
)

private val GrassLightScheme = lightColorScheme(
    primary = grassPrimaryLight,
    onPrimary = grassOnPrimaryLight,
    primaryContainer = grassPrimaryContainerLight,
    onPrimaryContainer = grassOnPrimaryContainerLight,
    secondary = grassSecondaryLight,
    onSecondary = grassOnSecondaryLight,
    secondaryContainer = grassSecondaryContainerLight,
    onSecondaryContainer = grassOnSecondaryContainerLight,
    tertiary = grassTertiaryLight,
    onTertiary = grassOnTertiaryLight,
    tertiaryContainer = grassTertiaryContainerLight,
    onTertiaryContainer = grassOnTertiaryContainerLight,
    error = grassErrorLight,
    onError = grassOnErrorLight,
    errorContainer = grassErrorContainerLight,
    onErrorContainer = grassOnErrorContainerLight,
    background = grassBackgroundLight,
    onBackground = grassOnBackgroundLight,
    surface = grassSurfaceLight,
    onSurface = grassOnSurfaceLight,
    surfaceVariant = grassSurfaceVariantLight,
    onSurfaceVariant = grassOnSurfaceVariantLight,
    outline = grassOutlineLight,
    outlineVariant = grassOutlineVariantLight,
    scrim = grassScrimLight,
    inverseSurface = grassInverseSurfaceLight,
    inverseOnSurface = grassInverseOnSurfaceLight,
    inversePrimary = grassInversePrimaryLight,
    surfaceDim = grassSurfaceDimLight,
    surfaceBright = grassSurfaceBrightLight,
    surfaceContainerLowest = grassSurfaceContainerLowestLight,
    surfaceContainerLow = grassSurfaceContainerLowLight,
    surfaceContainer = grassSurfaceContainerLight,
    surfaceContainerHigh = grassSurfaceContainerHighLight,
    surfaceContainerHighest = grassSurfaceContainerHighestLight
)

private val GrassDarkScheme = darkColorScheme(
    primary = grassPrimaryDark,
    onPrimary = grassOnPrimaryDark,
    primaryContainer = grassPrimaryContainerDark,
    onPrimaryContainer = grassOnPrimaryContainerDark,
    secondary = grassSecondaryDark,
    onSecondary = grassOnSecondaryDark,
    secondaryContainer = grassSecondaryContainerDark,
    onSecondaryContainer = grassOnSecondaryContainerDark,
    tertiary = grassTertiaryDark,
    onTertiary = grassOnTertiaryDark,
    tertiaryContainer = grassTertiaryContainerDark,
    onTertiaryContainer = grassOnTertiaryContainerDark,
    error = grassErrorDark,
    onError = grassOnErrorDark,
    errorContainer = grassErrorContainerDark,
    onErrorContainer = grassOnErrorContainerDark,
    background = grassBackgroundDark,
    onBackground = grassOnBackgroundDark,
    surface = grassSurfaceDark,
    onSurface = grassOnSurfaceDark,
    surfaceVariant = grassSurfaceVariantDark,
    onSurfaceVariant = grassOnSurfaceVariantDark,
    outline = grassOutlineDark,
    outlineVariant = grassOutlineVariantDark,
    scrim = grassScrimDark,
    inverseSurface = grassInverseSurfaceDark,
    inverseOnSurface = grassInverseOnSurfaceDark,
    inversePrimary = grassInversePrimaryDark,
    surfaceDim = grassSurfaceDimDark,
    surfaceBright = grassSurfaceBrightDark,
    surfaceContainerLowest = grassSurfaceContainerLowestDark,
    surfaceContainerLow = grassSurfaceContainerLowDark,
    surfaceContainer = grassSurfaceContainerDark,
    surfaceContainerHigh = grassSurfaceContainerHighDark,
    surfaceContainerHighest = grassSurfaceContainerHighestDark
)

private val GroundLightScheme = lightColorScheme(
    primary = groundPrimaryLight,
    onPrimary = groundOnPrimaryLight,
    primaryContainer = groundPrimaryContainerLight,
    onPrimaryContainer = groundOnPrimaryContainerLight,
    secondary = groundSecondaryLight,
    onSecondary = groundOnSecondaryLight,
    secondaryContainer = groundSecondaryContainerLight,
    onSecondaryContainer = groundOnSecondaryContainerLight,
    tertiary = groundTertiaryLight,
    onTertiary = groundOnTertiaryLight,
    tertiaryContainer = groundTertiaryContainerLight,
    onTertiaryContainer = groundOnTertiaryContainerLight,
    error = groundErrorLight,
    onError = groundOnErrorLight,
    errorContainer = groundErrorContainerLight,
    onErrorContainer = groundOnErrorContainerLight,
    background = groundBackgroundLight,
    onBackground = groundOnBackgroundLight,
    surface = groundSurfaceLight,
    onSurface = groundOnSurfaceLight,
    surfaceVariant = groundSurfaceVariantLight,
    onSurfaceVariant = groundOnSurfaceVariantLight,
    outline = groundOutlineLight,
    outlineVariant = groundOutlineVariantLight,
    scrim = groundScrimLight,
    inverseSurface = groundInverseSurfaceLight,
    inverseOnSurface = groundInverseOnSurfaceLight,
    inversePrimary = groundInversePrimaryLight,
    surfaceDim = groundSurfaceDimLight,
    surfaceBright = groundSurfaceBrightLight,
    surfaceContainerLowest = groundSurfaceContainerLowestLight,
    surfaceContainerLow = groundSurfaceContainerLowLight,
    surfaceContainer = groundSurfaceContainerLight,
    surfaceContainerHigh = groundSurfaceContainerHighLight,
    surfaceContainerHighest = groundSurfaceContainerHighestLight
)

private val GroundDarkScheme = darkColorScheme(
    primary = groundPrimaryDark,
    onPrimary = groundOnPrimaryDark,
    primaryContainer = groundPrimaryContainerDark,
    onPrimaryContainer = groundOnPrimaryContainerDark,
    secondary = groundSecondaryDark,
    onSecondary = groundOnSecondaryDark,
    secondaryContainer = groundSecondaryContainerDark,
    onSecondaryContainer = groundOnSecondaryContainerDark,
    tertiary = groundTertiaryDark,
    onTertiary = groundOnTertiaryDark,
    tertiaryContainer = groundTertiaryContainerDark,
    onTertiaryContainer = groundOnTertiaryContainerDark,
    error = groundErrorDark,
    onError = groundOnErrorDark,
    errorContainer = groundErrorContainerDark,
    onErrorContainer = groundOnErrorContainerDark,
    background = groundBackgroundDark,
    onBackground = groundOnBackgroundDark,
    surface = groundSurfaceDark,
    onSurface = groundOnSurfaceDark,
    surfaceVariant = groundSurfaceVariantDark,
    onSurfaceVariant = groundOnSurfaceVariantDark,
    outline = groundOutlineDark,
    outlineVariant = groundOutlineVariantDark,
    scrim = groundScrimDark,
    inverseSurface = groundInverseSurfaceDark,
    inverseOnSurface = groundInverseOnSurfaceDark,
    inversePrimary = groundInversePrimaryDark,
    surfaceDim = groundSurfaceDimDark,
    surfaceBright = groundSurfaceBrightDark,
    surfaceContainerLowest = groundSurfaceContainerLowestDark,
    surfaceContainerLow = groundSurfaceContainerLowDark,
    surfaceContainer = groundSurfaceContainerDark,
    surfaceContainerHigh = groundSurfaceContainerHighDark,
    surfaceContainerHighest = groundSurfaceContainerHighestDark
)

private val IceLightScheme = lightColorScheme(
    primary = icePrimaryLight,
    onPrimary = iceOnPrimaryLight,
    primaryContainer = icePrimaryContainerLight,
    onPrimaryContainer = iceOnPrimaryContainerLight,
    secondary = iceSecondaryLight,
    onSecondary = iceOnSecondaryLight,
    secondaryContainer = iceSecondaryContainerLight,
    onSecondaryContainer = iceOnSecondaryContainerLight,
    tertiary = iceTertiaryLight,
    onTertiary = iceOnTertiaryLight,
    tertiaryContainer = iceTertiaryContainerLight,
    onTertiaryContainer = iceOnTertiaryContainerLight,
    error = iceErrorLight,
    onError = iceOnErrorLight,
    errorContainer = iceErrorContainerLight,
    onErrorContainer = iceOnErrorContainerLight,
    background = iceBackgroundLight,
    onBackground = iceOnBackgroundLight,
    surface = iceSurfaceLight,
    onSurface = iceOnSurfaceLight,
    surfaceVariant = iceSurfaceVariantLight,
    onSurfaceVariant = iceOnSurfaceVariantLight,
    outline = iceOutlineLight,
    outlineVariant = iceOutlineVariantLight,
    scrim = iceScrimLight,
    inverseSurface = iceInverseSurfaceLight,
    inverseOnSurface = iceInverseOnSurfaceLight,
    inversePrimary = iceInversePrimaryLight,
    surfaceDim = iceSurfaceDimLight,
    surfaceBright = iceSurfaceBrightLight,
    surfaceContainerLowest = iceSurfaceContainerLowestLight,
    surfaceContainerLow = iceSurfaceContainerLowLight,
    surfaceContainer = iceSurfaceContainerLight,
    surfaceContainerHigh = iceSurfaceContainerHighLight,
    surfaceContainerHighest = iceSurfaceContainerHighestLight
)

private val IceDarkScheme = darkColorScheme(
    primary = icePrimaryDark,
    onPrimary = iceOnPrimaryDark,
    primaryContainer = icePrimaryContainerDark,
    onPrimaryContainer = iceOnPrimaryContainerDark,
    secondary = iceSecondaryDark,
    onSecondary = iceOnSecondaryDark,
    secondaryContainer = iceSecondaryContainerDark,
    onSecondaryContainer = iceOnSecondaryContainerDark,
    tertiary = iceTertiaryDark,
    onTertiary = iceOnTertiaryDark,
    tertiaryContainer = iceTertiaryContainerDark,
    onTertiaryContainer = iceOnTertiaryContainerDark,
    error = iceErrorDark,
    onError = iceOnErrorDark,
    errorContainer = iceErrorContainerDark,
    onErrorContainer = iceOnErrorContainerDark,
    background = iceBackgroundDark,
    onBackground = iceOnBackgroundDark,
    surface = iceSurfaceDark,
    onSurface = iceOnSurfaceDark,
    surfaceVariant = iceSurfaceVariantDark,
    onSurfaceVariant = iceOnSurfaceVariantDark,
    outline = iceOutlineDark,
    outlineVariant = iceOutlineVariantDark,
    scrim = iceScrimDark,
    inverseSurface = iceInverseSurfaceDark,
    inverseOnSurface = iceInverseOnSurfaceDark,
    inversePrimary = iceInversePrimaryDark,
    surfaceDim = iceSurfaceDimDark,
    surfaceBright = iceSurfaceBrightDark,
    surfaceContainerLowest = iceSurfaceContainerLowestDark,
    surfaceContainerLow = iceSurfaceContainerLowDark,
    surfaceContainer = iceSurfaceContainerDark,
    surfaceContainerHigh = iceSurfaceContainerHighDark,
    surfaceContainerHighest = iceSurfaceContainerHighestDark
)

private val NormalLightScheme = lightColorScheme(
    primary = normalPrimaryLight,
    onPrimary = normalOnPrimaryLight,
    primaryContainer = normalPrimaryContainerLight,
    onPrimaryContainer = normalOnPrimaryContainerLight,
    secondary = normalSecondaryLight,
    onSecondary = normalOnSecondaryLight,
    secondaryContainer = normalSecondaryContainerLight,
    onSecondaryContainer = normalOnSecondaryContainerLight,
    tertiary = normalTertiaryLight,
    onTertiary = normalOnTertiaryLight,
    tertiaryContainer = normalTertiaryContainerLight,
    onTertiaryContainer = normalOnTertiaryContainerLight,
    error = normalErrorLight,
    onError = normalOnErrorLight,
    errorContainer = normalErrorContainerLight,
    onErrorContainer = normalOnErrorContainerLight,
    background = normalBackgroundLight,
    onBackground = normalOnBackgroundLight,
    surface = normalSurfaceLight,
    onSurface = normalOnSurfaceLight,
    surfaceVariant = normalSurfaceVariantLight,
    onSurfaceVariant = normalOnSurfaceVariantLight,
    outline = normalOutlineLight,
    outlineVariant = normalOutlineVariantLight,
    scrim = normalScrimLight,
    inverseSurface = normalInverseSurfaceLight,
    inverseOnSurface = normalInverseOnSurfaceLight,
    inversePrimary = normalInversePrimaryLight,
    surfaceDim = normalSurfaceDimLight,
    surfaceBright = normalSurfaceBrightLight,
    surfaceContainerLowest = normalSurfaceContainerLowestLight,
    surfaceContainerLow = normalSurfaceContainerLowLight,
    surfaceContainer = normalSurfaceContainerLight,
    surfaceContainerHigh = normalSurfaceContainerHighLight,
    surfaceContainerHighest = normalSurfaceContainerHighestLight
)

private val NormalDarkScheme = darkColorScheme(
    primary = normalPrimaryDark,
    onPrimary = normalOnPrimaryDark,
    primaryContainer = normalPrimaryContainerDark,
    onPrimaryContainer = normalOnPrimaryContainerDark,
    secondary = normalSecondaryDark,
    onSecondary = normalOnSecondaryDark,
    secondaryContainer = normalSecondaryContainerDark,
    onSecondaryContainer = normalOnSecondaryContainerDark,
    tertiary = normalTertiaryDark,
    onTertiary = normalOnTertiaryDark,
    tertiaryContainer = normalTertiaryContainerDark,
    onTertiaryContainer = normalOnTertiaryContainerDark,
    error = normalErrorDark,
    onError = normalOnErrorDark,
    errorContainer = normalErrorContainerDark,
    onErrorContainer = normalOnErrorContainerDark,
    background = normalBackgroundDark,
    onBackground = normalOnBackgroundDark,
    surface = normalSurfaceDark,
    onSurface = normalOnSurfaceDark,
    surfaceVariant = normalSurfaceVariantDark,
    onSurfaceVariant = normalOnSurfaceVariantDark,
    outline = normalOutlineDark,
    outlineVariant = normalOutlineVariantDark,
    scrim = normalScrimDark,
    inverseSurface = normalInverseSurfaceDark,
    inverseOnSurface = normalInverseOnSurfaceDark,
    inversePrimary = normalInversePrimaryDark,
    surfaceDim = normalSurfaceDimDark,
    surfaceBright = normalSurfaceBrightDark,
    surfaceContainerLowest = normalSurfaceContainerLowestDark,
    surfaceContainerLow = normalSurfaceContainerLowDark,
    surfaceContainer = normalSurfaceContainerDark,
    surfaceContainerHigh = normalSurfaceContainerHighDark,
    surfaceContainerHighest = normalSurfaceContainerHighestDark
)

private val PoisonLightScheme = lightColorScheme(
    primary = poisonPrimaryLight,
    onPrimary = poisonOnPrimaryLight,
    primaryContainer = poisonPrimaryContainerLight,
    onPrimaryContainer = poisonOnPrimaryContainerLight,
    secondary = poisonSecondaryLight,
    onSecondary = poisonOnSecondaryLight,
    secondaryContainer = poisonSecondaryContainerLight,
    onSecondaryContainer = poisonOnSecondaryContainerLight,
    tertiary = poisonTertiaryLight,
    onTertiary = poisonOnTertiaryLight,
    tertiaryContainer = poisonTertiaryContainerLight,
    onTertiaryContainer = poisonOnTertiaryContainerLight,
    error = poisonErrorLight,
    onError = poisonOnErrorLight,
    errorContainer = poisonErrorContainerLight,
    onErrorContainer = poisonOnErrorContainerLight,
    background = poisonBackgroundLight,
    onBackground = poisonOnBackgroundLight,
    surface = poisonSurfaceLight,
    onSurface = poisonOnSurfaceLight,
    surfaceVariant = poisonSurfaceVariantLight,
    onSurfaceVariant = poisonOnSurfaceVariantLight,
    outline = poisonOutlineLight,
    outlineVariant = poisonOutlineVariantLight,
    scrim = poisonScrimLight,
    inverseSurface = poisonInverseSurfaceLight,
    inverseOnSurface = poisonInverseOnSurfaceLight,
    inversePrimary = poisonInversePrimaryLight,
    surfaceDim = poisonSurfaceDimLight,
    surfaceBright = poisonSurfaceBrightLight,
    surfaceContainerLowest = poisonSurfaceContainerLowestLight,
    surfaceContainerLow = poisonSurfaceContainerLowLight,
    surfaceContainer = poisonSurfaceContainerLight,
    surfaceContainerHigh = poisonSurfaceContainerHighLight,
    surfaceContainerHighest = poisonSurfaceContainerHighestLight
)

private val PoisonDarkScheme = darkColorScheme(
    primary = poisonPrimaryDark,
    onPrimary = poisonOnPrimaryDark,
    primaryContainer = poisonPrimaryContainerDark,
    onPrimaryContainer = poisonOnPrimaryContainerDark,
    secondary = poisonSecondaryDark,
    onSecondary = poisonOnSecondaryDark,
    secondaryContainer = poisonSecondaryContainerDark,
    onSecondaryContainer = poisonOnSecondaryContainerDark,
    tertiary = poisonTertiaryDark,
    onTertiary = poisonOnTertiaryDark,
    tertiaryContainer = poisonTertiaryContainerDark,
    onTertiaryContainer = poisonOnTertiaryContainerDark,
    error = poisonErrorDark,
    onError = poisonOnErrorDark,
    errorContainer = poisonErrorContainerDark,
    onErrorContainer = poisonOnErrorContainerDark,
    background = poisonBackgroundDark,
    onBackground = poisonOnBackgroundDark,
    surface = poisonSurfaceDark,
    onSurface = poisonOnSurfaceDark,
    surfaceVariant = poisonSurfaceVariantDark,
    onSurfaceVariant = poisonOnSurfaceVariantDark,
    outline = poisonOutlineDark,
    outlineVariant = poisonOutlineVariantDark,
    scrim = poisonScrimDark,
    inverseSurface = poisonInverseSurfaceDark,
    inverseOnSurface = poisonInverseOnSurfaceDark,
    inversePrimary = poisonInversePrimaryDark,
    surfaceDim = poisonSurfaceDimDark,
    surfaceBright = poisonSurfaceBrightDark,
    surfaceContainerLowest = poisonSurfaceContainerLowestDark,
    surfaceContainerLow = poisonSurfaceContainerLowDark,
    surfaceContainer = poisonSurfaceContainerDark,
    surfaceContainerHigh = poisonSurfaceContainerHighDark,
    surfaceContainerHighest = poisonSurfaceContainerHighestDark
)

private val PsychicLightScheme = lightColorScheme(
    primary = psychicPrimaryLight,
    onPrimary = psychicOnPrimaryLight,
    primaryContainer = psychicPrimaryContainerLight,
    onPrimaryContainer = psychicOnPrimaryContainerLight,
    secondary = psychicSecondaryLight,
    onSecondary = psychicOnSecondaryLight,
    secondaryContainer = psychicSecondaryContainerLight,
    onSecondaryContainer = psychicOnSecondaryContainerLight,
    tertiary = psychicTertiaryLight,
    onTertiary = psychicOnTertiaryLight,
    tertiaryContainer = psychicTertiaryContainerLight,
    onTertiaryContainer = psychicOnTertiaryContainerLight,
    error = psychicErrorLight,
    onError = psychicOnErrorLight,
    errorContainer = psychicErrorContainerLight,
    onErrorContainer = psychicOnErrorContainerLight,
    background = psychicBackgroundLight,
    onBackground = psychicOnBackgroundLight,
    surface = psychicSurfaceLight,
    onSurface = psychicOnSurfaceLight,
    surfaceVariant = psychicSurfaceVariantLight,
    onSurfaceVariant = psychicOnSurfaceVariantLight,
    outline = psychicOutlineLight,
    outlineVariant = psychicOutlineVariantLight,
    scrim = psychicScrimLight,
    inverseSurface = psychicInverseSurfaceLight,
    inverseOnSurface = psychicInverseOnSurfaceLight,
    inversePrimary = psychicInversePrimaryLight,
    surfaceDim = psychicSurfaceDimLight,
    surfaceBright = psychicSurfaceBrightLight,
    surfaceContainerLowest = psychicSurfaceContainerLowestLight,
    surfaceContainerLow = psychicSurfaceContainerLowLight,
    surfaceContainer = psychicSurfaceContainerLight,
    surfaceContainerHigh = psychicSurfaceContainerHighLight,
    surfaceContainerHighest = psychicSurfaceContainerHighestLight
)

private val PsychicDarkScheme = darkColorScheme(
    primary = psychicPrimaryDark,
    onPrimary = psychicOnPrimaryDark,
    primaryContainer = psychicPrimaryContainerDark,
    onPrimaryContainer = psychicOnPrimaryContainerDark,
    secondary = psychicSecondaryDark,
    onSecondary = psychicOnSecondaryDark,
    secondaryContainer = psychicSecondaryContainerDark,
    onSecondaryContainer = psychicOnSecondaryContainerDark,
    tertiary = psychicTertiaryDark,
    onTertiary = psychicOnTertiaryDark,
    tertiaryContainer = psychicTertiaryContainerDark,
    onTertiaryContainer = psychicOnTertiaryContainerDark,
    error = psychicErrorDark,
    onError = psychicOnErrorDark,
    errorContainer = psychicErrorContainerDark,
    onErrorContainer = psychicOnErrorContainerDark,
    background = psychicBackgroundDark,
    onBackground = psychicOnBackgroundDark,
    surface = psychicSurfaceDark,
    onSurface = psychicOnSurfaceDark,
    surfaceVariant = psychicSurfaceVariantDark,
    onSurfaceVariant = psychicOnSurfaceVariantDark,
    outline = psychicOutlineDark,
    outlineVariant = psychicOutlineVariantDark,
    scrim = psychicScrimDark,
    inverseSurface = psychicInverseSurfaceDark,
    inverseOnSurface = psychicInverseOnSurfaceDark,
    inversePrimary = psychicInversePrimaryDark,
    surfaceDim = psychicSurfaceDimDark,
    surfaceBright = psychicSurfaceBrightDark,
    surfaceContainerLowest = psychicSurfaceContainerLowestDark,
    surfaceContainerLow = psychicSurfaceContainerLowDark,
    surfaceContainer = psychicSurfaceContainerDark,
    surfaceContainerHigh = psychicSurfaceContainerHighDark,
    surfaceContainerHighest = psychicSurfaceContainerHighestDark
)

private val RockLightScheme = lightColorScheme(
    primary = rockPrimaryLight,
    onPrimary = rockOnPrimaryLight,
    primaryContainer = rockPrimaryContainerLight,
    onPrimaryContainer = rockOnPrimaryContainerLight,
    secondary = rockSecondaryLight,
    onSecondary = rockOnSecondaryLight,
    secondaryContainer = rockSecondaryContainerLight,
    onSecondaryContainer = rockOnSecondaryContainerLight,
    tertiary = rockTertiaryLight,
    onTertiary = rockOnTertiaryLight,
    tertiaryContainer = rockTertiaryContainerLight,
    onTertiaryContainer = rockOnTertiaryContainerLight,
    error = rockErrorLight,
    onError = rockOnErrorLight,
    errorContainer = rockErrorContainerLight,
    onErrorContainer = rockOnErrorContainerLight,
    background = rockBackgroundLight,
    onBackground = rockOnBackgroundLight,
    surface = rockSurfaceLight,
    onSurface = rockOnSurfaceLight,
    surfaceVariant = rockSurfaceVariantLight,
    onSurfaceVariant = rockOnSurfaceVariantLight,
    outline = rockOutlineLight,
    outlineVariant = rockOutlineVariantLight,
    scrim = rockScrimLight,
    inverseSurface = rockInverseSurfaceLight,
    inverseOnSurface = rockInverseOnSurfaceLight,
    inversePrimary = rockInversePrimaryLight,
    surfaceDim = rockSurfaceDimLight,
    surfaceBright = rockSurfaceBrightLight,
    surfaceContainerLowest = rockSurfaceContainerLowestLight,
    surfaceContainerLow = rockSurfaceContainerLowLight,
    surfaceContainer = rockSurfaceContainerLight,
    surfaceContainerHigh = rockSurfaceContainerHighLight,
    surfaceContainerHighest = rockSurfaceContainerHighestLight
)

private val RockDarkScheme = darkColorScheme(
    primary = rockPrimaryDark,
    onPrimary = rockOnPrimaryDark,
    primaryContainer = rockPrimaryContainerDark,
    onPrimaryContainer = rockOnPrimaryContainerDark,
    secondary = rockSecondaryDark,
    onSecondary = rockOnSecondaryDark,
    secondaryContainer = rockSecondaryContainerDark,
    onSecondaryContainer = rockOnSecondaryContainerDark,
    tertiary = rockTertiaryDark,
    onTertiary = rockOnTertiaryDark,
    tertiaryContainer = rockTertiaryContainerDark,
    onTertiaryContainer = rockOnTertiaryContainerDark,
    error = rockErrorDark,
    onError = rockOnErrorDark,
    errorContainer = rockErrorContainerDark,
    onErrorContainer = rockOnErrorContainerDark,
    background = rockBackgroundDark,
    onBackground = rockOnBackgroundDark,
    surface = rockSurfaceDark,
    onSurface = rockOnSurfaceDark,
    surfaceVariant = rockSurfaceVariantDark,
    onSurfaceVariant = rockOnSurfaceVariantDark,
    outline = rockOutlineDark,
    outlineVariant = rockOutlineVariantDark,
    scrim = rockScrimDark,
    inverseSurface = rockInverseSurfaceDark,
    inverseOnSurface = rockInverseOnSurfaceDark,
    inversePrimary = rockInversePrimaryDark,
    surfaceDim = rockSurfaceDimDark,
    surfaceBright = rockSurfaceBrightDark,
    surfaceContainerLowest = rockSurfaceContainerLowestDark,
    surfaceContainerLow = rockSurfaceContainerLowDark,
    surfaceContainer = rockSurfaceContainerDark,
    surfaceContainerHigh = rockSurfaceContainerHighDark,
    surfaceContainerHighest = rockSurfaceContainerHighestDark
)

private val SteelLightScheme = lightColorScheme(
    primary = steelPrimaryLight,
    onPrimary = steelOnPrimaryLight,
    primaryContainer = steelPrimaryContainerLight,
    onPrimaryContainer = steelOnPrimaryContainerLight,
    secondary = steelSecondaryLight,
    onSecondary = steelOnSecondaryLight,
    secondaryContainer = steelSecondaryContainerLight,
    onSecondaryContainer = steelOnSecondaryContainerLight,
    tertiary = steelTertiaryLight,
    onTertiary = steelOnTertiaryLight,
    tertiaryContainer = steelTertiaryContainerLight,
    onTertiaryContainer = steelOnTertiaryContainerLight,
    error = steelErrorLight,
    onError = steelOnErrorLight,
    errorContainer = steelErrorContainerLight,
    onErrorContainer = steelOnErrorContainerLight,
    background = steelBackgroundLight,
    onBackground = steelOnBackgroundLight,
    surface = steelSurfaceLight,
    onSurface = steelOnSurfaceLight,
    surfaceVariant = steelSurfaceVariantLight,
    onSurfaceVariant = steelOnSurfaceVariantLight,
    outline = steelOutlineLight,
    outlineVariant = steelOutlineVariantLight,
    scrim = steelScrimLight,
    inverseSurface = steelInverseSurfaceLight,
    inverseOnSurface = steelInverseOnSurfaceLight,
    inversePrimary = steelInversePrimaryLight,
    surfaceDim = steelSurfaceDimLight,
    surfaceBright = steelSurfaceBrightLight,
    surfaceContainerLowest = steelSurfaceContainerLowestLight,
    surfaceContainerLow = steelSurfaceContainerLowLight,
    surfaceContainer = steelSurfaceContainerLight,
    surfaceContainerHigh = steelSurfaceContainerHighLight,
    surfaceContainerHighest = steelSurfaceContainerHighestLight,
)

private val SteelDarkScheme = darkColorScheme(
    primary = steelPrimaryDark,
    onPrimary = steelOnPrimaryDark,
    primaryContainer = steelPrimaryContainerDark,
    onPrimaryContainer = steelOnPrimaryContainerDark,
    secondary = steelSecondaryDark,
    onSecondary = steelOnSecondaryDark,
    secondaryContainer = steelSecondaryContainerDark,
    onSecondaryContainer = steelOnSecondaryContainerDark,
    tertiary = steelTertiaryDark,
    onTertiary = steelOnTertiaryDark,
    tertiaryContainer = steelTertiaryContainerDark,
    onTertiaryContainer = steelOnTertiaryContainerDark,
    error = steelErrorDark,
    onError = steelOnErrorDark,
    errorContainer = steelErrorContainerDark,
    onErrorContainer = steelOnErrorContainerDark,
    background = steelBackgroundDark,
    onBackground = steelOnBackgroundDark,
    surface = steelSurfaceDark,
    onSurface = steelOnSurfaceDark,
    surfaceVariant = steelSurfaceVariantDark,
    onSurfaceVariant = steelOnSurfaceVariantDark,
    outline = steelOutlineDark,
    outlineVariant = steelOutlineVariantDark,
    scrim = steelScrimDark,
    inverseSurface = steelInverseSurfaceDark,
    inverseOnSurface = steelInverseOnSurfaceDark,
    inversePrimary = steelInversePrimaryDark,
    surfaceDim = steelSurfaceDimDark,
    surfaceBright = steelSurfaceBrightDark,
    surfaceContainerLowest = steelSurfaceContainerLowestDark,
    surfaceContainerLow = steelSurfaceContainerLowDark,
    surfaceContainer = steelSurfaceContainerDark,
    surfaceContainerHigh = steelSurfaceContainerHighDark,
    surfaceContainerHighest = steelSurfaceContainerHighestDark,
)

private val WaterLightScheme = lightColorScheme(
    primary = waterPrimaryLight,
    onPrimary = waterOnPrimaryLight,
    primaryContainer = waterPrimaryContainerLight,
    onPrimaryContainer = waterOnPrimaryContainerLight,
    secondary = waterSecondaryLight,
    onSecondary = waterOnSecondaryLight,
    secondaryContainer = waterSecondaryContainerLight,
    onSecondaryContainer = waterOnSecondaryContainerLight,
    tertiary = waterTertiaryLight,
    onTertiary = waterOnTertiaryLight,
    tertiaryContainer = waterTertiaryContainerLight,
    onTertiaryContainer = waterOnTertiaryContainerLight,
    error = waterErrorLight,
    onError = waterOnErrorLight,
    errorContainer = waterErrorContainerLight,
    onErrorContainer = waterOnErrorContainerLight,
    background = waterBackgroundLight,
    onBackground = waterOnBackgroundLight,
    surface = waterSurfaceLight,
    onSurface = waterOnSurfaceLight,
    surfaceVariant = waterSurfaceVariantLight,
    onSurfaceVariant = waterOnSurfaceVariantLight,
    outline = waterOutlineLight,
    outlineVariant = waterOutlineVariantLight,
    scrim = waterScrimLight,
    inverseSurface = waterInverseSurfaceLight,
    inverseOnSurface = waterInverseOnSurfaceLight,
    inversePrimary = waterInversePrimaryLight,
    surfaceDim = waterSurfaceDimLight,
    surfaceBright = waterSurfaceBrightLight,
    surfaceContainerLowest = waterSurfaceContainerLowestLight,
    surfaceContainerLow = waterSurfaceContainerLowLight,
    surfaceContainer = waterSurfaceContainerLight,
    surfaceContainerHigh = waterSurfaceContainerHighLight,
    surfaceContainerHighest = waterSurfaceContainerHighestLight,
)

private val WaterDarkScheme = darkColorScheme(
    primary = waterPrimaryDark,
    onPrimary = waterOnPrimaryDark,
    primaryContainer = waterPrimaryContainerDark,
    onPrimaryContainer = waterOnPrimaryContainerDark,
    secondary = waterSecondaryDark,
    onSecondary = waterOnSecondaryDark,
    secondaryContainer = waterSecondaryContainerDark,
    onSecondaryContainer = waterOnSecondaryContainerDark,
    tertiary = waterTertiaryDark,
    onTertiary = waterOnTertiaryDark,
    tertiaryContainer = waterTertiaryContainerDark,
    onTertiaryContainer = waterOnTertiaryContainerDark,
    error = waterErrorDark,
    onError = waterOnErrorDark,
    errorContainer = waterErrorContainerDark,
    onErrorContainer = waterOnErrorContainerDark,
    background = waterBackgroundDark,
    onBackground = waterOnBackgroundDark,
    surface = waterSurfaceDark,
    onSurface = waterOnSurfaceDark,
    surfaceVariant = waterSurfaceVariantDark,
    onSurfaceVariant = waterOnSurfaceVariantDark,
    outline = waterOutlineDark,
    outlineVariant = waterOutlineVariantDark,
    scrim = waterScrimDark,
    inverseSurface = waterInverseSurfaceDark,
    inverseOnSurface = waterInverseOnSurfaceDark,
    inversePrimary = waterInversePrimaryDark,
    surfaceDim = waterSurfaceDimDark,
    surfaceBright = waterSurfaceBrightDark,
    surfaceContainerLowest = waterSurfaceContainerLowestDark,
    surfaceContainerLow = waterSurfaceContainerLowDark,
    surfaceContainer = waterSurfaceContainerDark,
    surfaceContainerHigh = waterSurfaceContainerHighDark,
    surfaceContainerHighest = waterSurfaceContainerHighestDark,
)

private val DarkColorScheme =
    darkColorScheme(
        primary = primaryDark,
        onPrimary = onPrimaryDark,
        primaryContainer = primaryContainerDark,
        onPrimaryContainer = onPrimaryContainerDark,
        secondary = secondaryDark,
        onSecondary = onSecondaryDark,
        secondaryContainer = secondaryContainerDark,
        onSecondaryContainer = onSecondaryContainerDark,
        tertiary = tertiaryDark,
        onTertiary = onTertiaryDark,
        tertiaryContainer = tertiaryContainerDark,
        onTertiaryContainer = onTertiaryContainerDark,
        error = errorDark,
        onError = onErrorDark,
        errorContainer = errorContainerDark,
        onErrorContainer = onErrorContainerDark,
        background = backgroundDark,
        onBackground = onBackgroundDark,
        surface = surfaceDark,
        onSurface = onSurfaceDark,
        surfaceVariant = surfaceVariantDark,
        onSurfaceVariant = onSurfaceVariantDark,
        outline = outlineDark,
        outlineVariant = outlineVariantDark,
        scrim = scrimDark,
        inverseSurface = inverseSurfaceDark,
        inverseOnSurface = inverseOnSurfaceDark,
        inversePrimary = inversePrimaryDark,
        surfaceDim = surfaceDimDark,
        surfaceBright = surfaceBrightDark,
        surfaceContainerLowest = surfaceContainerLowestDark,
        surfaceContainerLow = surfaceContainerLowDark,
        surfaceContainer = surfaceContainerDark,
        surfaceContainerHigh = surfaceContainerHighDark,
        surfaceContainerHighest = surfaceContainerHighestDark,
    )
private val LightColorScheme =
    lightColorScheme(
        primary = primaryLight,
        onPrimary = onPrimaryLight,
        primaryContainer = primaryContainerLight,
        onPrimaryContainer = onPrimaryContainerLight,
        secondary = secondaryLight,
        onSecondary = onSecondaryLight,
        secondaryContainer = secondaryContainerLight,
        onSecondaryContainer = onSecondaryContainerLight,
        tertiary = tertiaryLight,
        onTertiary = onTertiaryLight,
        tertiaryContainer = tertiaryContainerLight,
        onTertiaryContainer = onTertiaryContainerLight,
        error = errorLight,
        onError = onErrorLight,
        errorContainer = errorContainerLight,
        onErrorContainer = onErrorContainerLight,
        background = backgroundLight,
        onBackground = onBackgroundLight,
        surface = surfaceLight,
        onSurface = onSurfaceLight,
        surfaceVariant = surfaceVariantLight,
        onSurfaceVariant = onSurfaceVariantLight,
        outline = outlineLight,
        outlineVariant = outlineVariantLight,
        scrim = scrimLight,
        inverseSurface = inverseSurfaceLight,
        inverseOnSurface = inverseOnSurfaceLight,
        inversePrimary = inversePrimaryLight,
        surfaceDim = surfaceDimLight,
        surfaceBright = surfaceBrightLight,
        surfaceContainerLowest = surfaceContainerLowestLight,
        surfaceContainerLow = surfaceContainerLowLight,
        surfaceContainer = surfaceContainerLight,
        surfaceContainerHigh = surfaceContainerHighLight,
        surfaceContainerHighest = surfaceContainerHighestLight,
    )

private val themeConfigs = mapOf(
    TypeThemeConfig.BUG to { isDarkMode: Boolean -> if (isDarkMode) BugDarkScheme else BugLightScheme },
    TypeThemeConfig.DARK to { isDarkMode: Boolean -> if (isDarkMode) DarkDarkScheme else DarkLightScheme },
    TypeThemeConfig.DRAGON to { isDarkMode: Boolean -> if (isDarkMode) DragonDarkScheme else DragonLightScheme },
    TypeThemeConfig.ELECTRIC to { isDarkMode: Boolean -> if (isDarkMode) ElectricDarkScheme else ElectricLightScheme },
    TypeThemeConfig.FAIRY to { isDarkMode: Boolean -> if (isDarkMode) FairyDarkScheme else FairyLightScheme },
    TypeThemeConfig.FIGHTING to { isDarkMode: Boolean -> if (isDarkMode) FightingDarkScheme else FightingLightScheme },
    TypeThemeConfig.FIRE to { isDarkMode: Boolean -> if (isDarkMode) FireDarkScheme else FireLightScheme },
    TypeThemeConfig.FLYING to { isDarkMode: Boolean -> if (isDarkMode) FlyingDarkScheme else FlyingLightScheme },
    TypeThemeConfig.GHOST to { isDarkMode: Boolean -> if (isDarkMode) GhostDarkScheme else GhostLightScheme },
    TypeThemeConfig.GRASS to { isDarkMode: Boolean -> if (isDarkMode) GrassDarkScheme else GrassLightScheme },
    TypeThemeConfig.GROUND to { isDarkMode: Boolean -> if (isDarkMode) GroundDarkScheme else GroundLightScheme },
    TypeThemeConfig.ICE to { isDarkMode: Boolean -> if (isDarkMode) IceDarkScheme else IceLightScheme },
    TypeThemeConfig.NORMAL to { isDarkMode: Boolean -> if (isDarkMode) NormalDarkScheme else NormalLightScheme },
    TypeThemeConfig.POISON to { isDarkMode: Boolean -> if (isDarkMode) PoisonDarkScheme else PoisonLightScheme },
    TypeThemeConfig.PSYCHIC to { isDarkMode: Boolean -> if (isDarkMode) PsychicDarkScheme else PsychicLightScheme },
    TypeThemeConfig.ROCK to { isDarkMode: Boolean -> if (isDarkMode) RockDarkScheme else RockLightScheme },
    TypeThemeConfig.STEEL to { isDarkMode: Boolean -> if (isDarkMode) SteelDarkScheme else SteelLightScheme },
    TypeThemeConfig.WATER to { isDarkMode: Boolean -> if (isDarkMode) WaterDarkScheme else WaterLightScheme }
)

@Composable
fun ComposeDexTheme(
    appTheme: TypeThemeConfig,
    isDarkMode: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colorScheme = themeConfigs[appTheme]?.invoke(isDarkMode)
        ?: if (isDarkMode) DarkColorScheme else LightColorScheme
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = isDarkMode
        }
    }
    MaterialTheme(
        colorScheme = colorScheme,
        typography = AppTypography,
        content = content
    )
}
